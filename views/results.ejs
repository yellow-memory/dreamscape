<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta
      http-equiv="Content-Security-Policy"
      content="frame-ancestors 'self' https://kudio.co.uk"
    />
    <title>Domain Availability Checker</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        height: 100vh;
        background-color: #f4f4f4;
      }

      .widget {
        text-align: left;
        max-width: 100%;
        margin: 0 auto;
        padding: 20px;
        background-color: transparent;
      }

      .input-group {
        display: flex;
        align-items: center;
        margin-top: 20px;
      }

      .prefix {
        font-size: 18px;
        padding: 22px;
        background: #eee;
      }

      input {
        padding: 20px;
        border: 0px solid #ccc;
        flex-grow: 1;
        min-height: 25px;
      }

      button {
        padding: 24px 25px;
        background-color: #003b44;
        color: white;
        border: none;
        border-radius: 0px;
        cursor: pointer;
        min-height: 21px;
      }

      button:hover {
        background-color: #0056b3;
      }

      .results-container {
        max-width: 100%;
        margin: 15px auto;
        border: 1px solid grey;
        padding: 20px;
        border-radius: 8px;
        background-color: white;
        display: none;
      }

      .domain-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px 0;
        border-bottom: 1px solid #ccc;
        transition: background-color 0.3s;
      }

      .domain-row.selected {
        background-color: #fffee4;
      }

      .domain-row:last-child {
        border-bottom: none;
      }

      .status {
        display: flex;
        flex-direction: column;
        align-items: center;
        /* margin-right: auto;
        margin-left: auto; */
        text-align: center;
      }

      .available {
        color: #38b6ff;
        font-size: 12px;
        font-weight: normal;
      }

      .taken {
        color: #ff4d4d;
        font-size: 12px;
        font-weight: normal;
        text-align: center;
      }

      .price {
        color: #333;
        font-size: 12px;
        font-weight: normal;
      }

      .buy-button {
        padding: 10px 20px;
        background-color: transparent;
        color: black;
        border: 1px solid grey;
        border-radius: 0px;
        cursor: pointer;
        margin-left: 20px;
      }

      .buy-button:hover {
        background-color: #0056b3;
        color: white;
      }

      .form-group {
        margin-bottom: 10px;
      }

      .form-group label {
        display: block;
        font-size: 14px;
      }

      .form-group input {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      .hidden {
        display: none;
      }

      .loader {
        border: 5px solid #f3f3f3;
        border-top: 5px solid #003b44;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin: 20px auto;
      }

      .progress-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 20px 0;
      }

      .progress-step {
        flex: 1;
        text-align: center;
        position: relative;
        font-weight: bold;
        color: #ccc;
      }

      .progress-step.active {
        color: #38b6ff;
      }

      .progress-step::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: calc(100% - 50%);
        height: 2px;
        background-color: #ccc;
        transform: translateX(50%) translateY(-50%);
        z-index: -1;
      }

      .progress-step:last-child::after {
        display: none;
      }

      .selected-domain {
        text-align: center;
        font-size: 18px;
        margin-top: 10px;
        font-weight: bold;
        color: #003b44;
      }

      .confirmation-container {
        max-width: 100%;
        margin: 15px auto;
        border: 1px solid grey;
        padding: 20px;
        border-radius: 8px;
        background-color: white;
        display: none;
      }

      .confirmation-box {
        border: 1px solid #ccc;
        padding: 15px;
        margin-bottom: 10px;
      }

      .confirmation-button {
        padding: 10px 20px;
        background-color: #003b44;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .confirmation-button:hover {
        background-color: #0056b3;
      }

      .stripe-input {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: calc(100% - 22px); /* Adjusting for padding */
      }

      .inner-status {
        display: flex;
      }

      .text-center {
        text-align: center;
      }

      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
    </style>
    <script src="https://js.stripe.com/v3/"></script>
  </head>
  <body>
    <div class="widget">
      <h2>Find your perfect domain</h2>
      <div class="input-group">
        <span class="prefix">www.</span>
        <input type="text" id="domainInput" placeholder="Enter domain name" />
        <button id="checkButton">Explore</button>
      </div>

      <!-- Progress Bar -->
      <div class="progress-bar" id="progressBar">
        <div class="progress-step" id="progressDomain">Domain</div>
        <div class="progress-step" id="progressRegister">Register</div>
        <div class="progress-step" id="progressConfirm">Confirm</div>
      </div>

      <!-- Selected Domain Display -->
      <div id="selectedDomain" class="selected-domain hidden"></div>
    </div>

    <!-- Loader -->
    <div id="loader" class="loader hidden"></div>

    <!-- Search Results and Registrant Form Container -->
    <div class="results-container" id="resultsContainer">
      <h2>Search Results</h2>
    </div>

    <!-- Registrant Form -->
    <div id="registrantForm" class="results-container hidden">
      <h1>Register</h1>
      <!-- <h3>Login Below</h3>
      <div class="form-group">
        <label for="login-username">Username</label>
        <input type="text" id="login-username" required />
      </div>
      <div class="form-group">
        <label for="login-password">Password</label>
        <input type="password" id="login-password" required />
      </div>
      <button id="submitLoginButton" onclick="submitLoginForm()">Login</button> -->
      <!-- </div>

    <div id="registrantForm" class="results-container hidden"> -->
      <h3>Register Below</h3>
      <!-- <div class="form-group">
        <label for="username">Username</label>
        <input type="text" id="username" />
      </div>
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" />
      </div> -->
      <div class="form-group">
        <label for="firstName">First Name</label>
        <input type="text" id="firstName" required />
      </div>
      <div class="form-group">
        <label for="lastName">Last Name</label>
        <input type="text" id="lastName" required />
      </div>
      <div class="form-group">
        <label for="address">Address</label>
        <input type="text" id="address" required />
      </div>
      <div class="form-group">
        <label for="city">City</label>
        <input type="text" id="city" required />
      </div>
      <div class="form-group">
        <label for="country">Country</label>
        <input type="text" id="country" value="GB" disabled required />
      </div>
      <div class="form-group">
        <label for="state">State</label>
        <input type="text" id="state" required />
      </div>
      <div class="form-group">
        <label for="postCode">Post Code</label>
        <input type="text" id="postCode" required />
      </div>
      <div class="form-group">
        <label for="countryCode">Country Code</label>
        <input type="text" id="countryCode" required />
      </div>
      <div class="form-group">
        <label for="phone">Phone Number</label>
        <input type="text" id="phone" required />
      </div>
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" required />
      </div>
      <div class="form-group">
        <label for="accountType">Account Type</label>
        <input
          type="text"
          id="accountType"
          value="personal"
          disabled
          required
        />
      </div>
      <!-- <div class="form-group">
        <label for="businessName">Business Name</label>
        <input type="text" id="businessName" />
      </div>
      <div class="form-group">
        <label for="businessNumberType">Business Number Type (e.g., ABN)</label>
        <input type="text" id="businessNumberType" />
      </div>
      <div class="form-group">
        <label for="businessNumber">Business Number</label>
        <input type="text" id="businessNumber" />
      </div> -->
      <button id="submitRegistrantButton" onclick="submitRegisterForm()">
        Create
      </button>
    </div>

    <!-- Confirmation Container -->
    <div id="confirmationContainer" class="confirmation-container hidden">
      <h2>Confirmation</h2>
      <div class="confirmation-box" id="domainConfirmation">
        <strong>Domain Confirmation</strong><br />
        Domain: www.' + selectedDomainName + '<br />Price: Â£' +
        selectedDomainPrice + ' Per Year<br />
        Auto Renew
      </div>
      <div class="confirmation-box" id="accountCreated">
        <strong>Account Created</strong><br />
        Customer ID: M12097302<br />
        Username: Smith9876<br />
        Name: Sample Smith
      </div>
      <div id="paymentForm" class="form-container">
        <h2>Payment Information</h2>
        <div class="form-info" id="selectedDomainInfo"></div>
        <div class="form-info" id="selectedEmailPackageInfo"></div>
        <div class="thin-line"></div>
        <!-- Grey line -->
        <div class="total-payment" id="totalPaymentInfo"></div>
        <div class="thin-line"></div>
        <!-- Grey line -->

        <form id="stripePaymentForm">
          <div class="form-group">
            <label for="cardHolderName">Card Holder Name</label>
            <input
              type="text"
              id="cardHolderName"
              class="stripe-input"
              required
            />
          </div>
          <div class="form-group">
            <label for="card-element">Card Information</label>
            <div id="card-element" class="stripe-input"></div>
          </div>
          <button type="submit">Pay & Register Domain</button>
          <div id="card-errors" role="alert"></div>
        </form>
      </div>
    </div>

    <!-- Success Notification -->
    <div id="successNotification" class="confirmation-container text-center">
      <h1>Confirmation</h1>
      <p style="margin-top: 20px; margin-bottom: 20px">Thank you!</p>
      <p>Your Domain has been registered successfully!</p>
      <p>Please check your email account to access domain settins.</p>
    </div>

    <script>
      const stripePublicKey = "<%= stripePublicKey %>";
      const stripe = Stripe(stripePublicKey);
      console.log("===============> stripe public key", stripePublicKey);

      const elements = stripe.elements();
      const cardElement = elements.create("card");
      cardElement.mount("#card-element");

      let customerID = 0,
        registrantID = 0;

      function validateForm() {
        const requiredFields = [
          "firstName",
          "lastName",
          "address",
          "city",
          "state",
          "postCode",
          "country",
          "countryCode",
          "phone",
          "email",
        ];

        let isValid = true;
        requiredFields.forEach((fieldId) => {
          const field = document.getElementById(fieldId);
          if (!field.value.trim()) {
            isValid = false;
            field.classList.add("error"); // Optionally add a class to highlight the error
          } else {
            field.classList.remove("error");
          }
        });

        return isValid;
      }

      function showLoader() {
        const loader = document.getElementById("loader");
        loader.classList.remove("hidden");
      }

      function hideLoader() {
        const loader = document.getElementById("loader");
        loader.classList.add("hidden");
      }

      document.addEventListener("DOMContentLoaded", () => {
        document
          .getElementById("checkButton")
          .addEventListener("click", async () => {
            setProgressBarStep("Domain");
            const domain = document.getElementById("domainInput").value.trim();
            const resultsContainer =
              document.getElementById("resultsContainer");

            if (!domain) {
              resultsContainer.innerHTML =
                "<h2>Search Results</h2><p>Please enter a domain name.</p>";
              resultsContainer.style.display = "block";
              return;
            }

            // Clear previous results
            resultsContainer.style.display = "none";
            resultsContainer.innerHTML = "<h2>Search Results</h2>";

            // Show loader
            showLoader();

            try {
              console.log("Sending request to check domain availability...");
              const response = await fetch(
                `/domain-availability?domain=${encodeURIComponent(domain)}`
              );

              console.log("Response received:", response);

              if (!response.ok) {
                console.error("Response status not ok:", response.status);
                throw new Error("Network response was not ok");
              }

              const data = await response.json();
              console.log("Response data:", data);

              // Hide loader
              hideLoader();

              if (data.error) {
                resultsContainer.innerHTML += `<p>${data.error}</p>`;
                resultsContainer.style.display = "block";
                return;
              }

              if (!data.data || data.data.length === 0) {
                resultsContainer.innerHTML +=
                  "<p>No domains available or invalid domain name.</p>";
                resultsContainer.style.display = "block";
                return;
              }

              // Display results container
              resultsContainer.style.display = "block";

              // Display the domain results
              data.data.forEach((domainItem) => {
                const vat = (domainItem.register_price * 20) / 100;
                const priceWithTax = domainItem.register_price + vat;
                const finalPrice = ((priceWithTax * 280) / 100).toFixed(2);

                const domainRow = document.createElement("div");
                domainRow.classList.add("domain-row");
                domainRow.id = `domainRow-${domainItem.domain_name}`;

                const domainNameDiv = document.createElement("div");
                domainNameDiv.classList.add("domain-name");
                domainNameDiv.innerHTML = `www.${domainItem.domain_name}`;
                domainRow.appendChild(domainNameDiv);

                const statusDiv = document.createElement("div");
                statusDiv.classList.add("status");

                if (domainItem.is_available) {
                  statusDiv.innerHTML = `
                                  <div class="available">Available</div>
                                  <div class="price">&pound;${finalPrice} / Per Year</div>
                              `;
                  const buyButton = document.createElement("button");
                  buyButton.classList.add("buy-button");
                  buyButton.innerHTML = "Register";
                  buyButton.onclick = () => {
                    showRegistrantForm(domainItem.domain_name, finalPrice);
                    displaySelectedDomain(domainItem.domain_name);
                  };

                  const innerStatusDiv = document.createElement("div");
                  innerStatusDiv.classList.add("inner-status");
                  innerStatusDiv.appendChild(statusDiv);
                  innerStatusDiv.appendChild(buyButton);

                  domainRow.appendChild(innerStatusDiv);
                } else {
                  statusDiv.innerHTML = `<div class="taken">Taken</div>`;
                  domainRow.appendChild(statusDiv);
                }

                resultsContainer.appendChild(domainRow);
              });
            } catch (error) {
              console.error("Error fetching domain availability:", error);
              resultsContainer.innerHTML += `<p>Error fetching domain availability: ${error.message}</p>`;
              resultsContainer.style.display = "block";

              // Hide loader
              loader.classList.add("hidden");
            }
          });

        window.showRegistrantForm = function (domainName, domainPrice) {
          selectedDomainName = domainName;
          selectedDomainPrice = domainPrice;
          setProgressBarStep("Register");
          console.log("Showing registrant form for domain:", domainName);

          hideContainer("resultsContainer");

          showContainer("registrantForm");
        };

        window.submitLoginForm = function () {
          console.log("Submitting login form...");
          const formData = new FormData();
          formData.append(
            "username",
            document.getElementById("login-username").value
          );
          formData.append(
            "password",
            document.getElementById("login-password").value
          );
        };

        window.submitRegisterForm = async function () {
          if (!validateForm()) {
            alert("Please fill in all required fields.");
            return;
          } else {
            console.log("Submitting registrant form...");

            // const username = document.getElementById("username").value;
            // const password = document.getElementById("password").value;

            const first_name = document.getElementById("firstName").value;
            const last_name = document.getElementById("lastName").value;
            const address = document.getElementById("address").value;
            const city = document.getElementById("city").value;
            const state = document.getElementById("state").value;

            const post_code = document.getElementById("postCode").value;
            const country = document.getElementById("country").value;
            const country_code = parseInt(
              document.getElementById("countryCode").value
            );

            const phone = document.getElementById("phone").value;
            const email = document.getElementById("email").value;

            const account_type = document.getElementById("accountType").value;
            // const business_name = document.getElementById("businessName").value;
            // const business_number_type =
            //   document.getElementById("businessNumberType").value;
            // const business_number =
            //   document.getElementById("businessNumber").value;

            const data = {
              first_name,
              last_name,
              address,
              city,
              state,
              post_code,
              country,
              country_code,
              phone,
              email,
              account_type,
            };

            await fetch("/registrant", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            })
              .then((response) => {
                result = response.json();
                if (!response.ok) {
                  return;
                }
                return result;
              })
              .then((result) => {
                console.log(result);
                if (result.status) {
                  customerID = result.customer;
                  username = result.username;
                  showConfirmation(customerID, username, first_name, last_name);
                } else {
                  for (const key in result.error) {
                    alert("Failed to register customer: " + result.error[key]);
                  }
                }
              });
          }
        };

        function setProgressBarStep(step) {
          const steps = ["Domain", "Register", "Confirm"];
          steps.forEach(function (currentStep) {
            const element = document.getElementById(`progress${currentStep}`);
            if (currentStep === step) {
              element.classList.add("active");
            } else {
              element.classList.remove("active");
            }
          });
        }

        function displaySelectedDomain(domainName) {
          let selectedDomainName = "";
          let selectedDomainPrice = "";
          const selectedDomainDiv = document.getElementById("selectedDomain");
          selectedDomainDiv.textContent = `Selected Domain: www.${domainName}`;
          selectedDomainDiv.classList.remove("hidden");
        }

        function showConfirmation(customerID, username, first_name, last_name) {
          setProgressBarStep("Confirm");
          hideContainer("registrantForm");

          showContainer("confirmationContainer");

          // Set confirmation details
          document.getElementById("domainConfirmation").innerHTML = `
          <strong>Domain Confirmation</strong><br>
          Domain: www.${selectedDomainName}<br>
          Price: Â£${selectedDomainPrice} Per Year<br>
          Auto Renew`;
          document.getElementById("accountCreated").innerHTML = `
          <strong>Account Created</strong><br>
          Customer ID: ${customerID}<br>
          Username: ${username}<br>
          Name: ${document.getElementById("firstName").value} ${
            document.getElementById("lastName").value
          }`;
        }

        document
          .getElementById("stripePaymentForm")
          .addEventListener("submit", async (event) => {
            event.preventDefault();

            hideContainer("confirmationContainer");
            showLoader();

            const { paymentMethod, error } = await stripe.createPaymentMethod({
              type: "card",
              card: cardElement,
              billing_details: {
                name: document.getElementById("cardHolderName").value,
              },
            });

            if (error) {
              hideLoader();
              console.error("Error creating payment method:", error);
              alert("Error creating payment method:", error.message);
              document.getElementById("card-errors").innerText = error.message;
              return;
            } else {
              const totalPrice = selectedDomainPrice * 100; // Convert to pence

              const response = await fetch(`/create-payment-intent`, {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  paymentMethodId: paymentMethod.id,
                  domain: selectedDomainName,
                  customer_id: customerID,
                  price: totalPrice,
                }),
              });

              const response_data = await response.json();
              console.log("===============>response data:", response_data);

              console.log(
                "===============> domain register result ",
                response_data.domainData.status
              );

              if (response_data.domainData.status) {
                hideLoader();
                showSuccessNotification();
              } else {
                hideLoader();
                alert(
                  "Domain registration failed! " +
                    response_data.domainData.error_message
                );

                showContainer("confirmationContainer");
              }
              // } else {
              //   alert(
              //     "Domain registration failed!" +
              //       response_data.domainData.error_message
              //   );
              // }
            }
          });

        function showSuccessNotification() {
          hideContainer("confirmationContainer");

          showContainer("successNotification");
        }

        function showContainer(id) {
          const container = document.getElementById(id);
          container.style.display = "block";
          successNotification.scrollIntoView({ behavior: "smooth" });
        }

        function hideContainer(id) {
          const container = document.getElementById(id);
          container.style.display = "none";
        }
      });
    </script>
  </body>
</html>
